"use strict";(self.webpackChunkdocs_item_predicate_parser=self.webpackChunkdocs_item_predicate_parser||[]).push([[53],{8612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(4848),s=n(8453);const a={sidebar_position:6},o="External Support",i={id:"external-support",title:"External Support",description:"The following plugins are supported to resolve language-keys by, meaning that the entries they add to the server's central Registry will also show up when building predicates; the display-names they provide are sanitized, meaning that all color-values - be it legacy, hex or even MiniMessage XML-format - are stripped off, in order to ensure a seamless experience.",source:"@site/docs/external-support.md",sourceDirName:".",slug:"/external-support",permalink:"/docs-item-predicate-parser/external-support",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"documentationSidebar",previous:{title:"API Usage",permalink:"/docs-item-predicate-parser/api-usage"}},l={},c=[{value:"EcoEnchants",id:"ecoenchants",level:2},{value:"ExcellentEnchants",id:"excellentenchants",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"external-support",children:"External Support"})}),"\n",(0,r.jsxs)(t.p,{children:["The following plugins are supported to resolve language-keys by, meaning that the entries they add to the server's central ",(0,r.jsx)(t.code,{children:"Registry"})," will also show up when building predicates; the display-names they provide are sanitized, meaning that all color-values - be it legacy, hex or even MiniMessage XML-format - are stripped off, in order to ensure a seamless experience."]}),"\n",(0,r.jsx)(t.p,{children:"If a key could not be resolved neither internally nor externally, a warning will be logged on startup; use these messages to report back, so that further support can be added. There's no limitation to how many plugins may be supported, as integration requires only a few lines of code."}),"\n",(0,r.jsx)(t.h2,{id:"ecoenchants",children:"EcoEnchants"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/Auxilor/EcoEnchants",children:"https://github.com/Auxilor/EcoEnchants"})}),"\n",(0,r.jsx)(t.h2,{id:"excellentenchants",children:"ExcellentEnchants"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/nulli0n/ExcellentEnchants-spigot",children:"https://github.com/nulli0n/ExcellentEnchants-spigot"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);