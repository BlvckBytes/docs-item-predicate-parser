"use strict";(self.webpackChunkdocs_item_predicate_parser=self.webpackChunkdocs_item_predicate_parser||[]).push([[809],{1951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=n(4848),r=n(8453);const i={sidebar_position:11},a="Exact Mode",c={id:"expression-syntax/exact-mode",title:"Exact Mode",description:"Exact mode is not a predicate by itself, but rather an operator which can be prepended to any other expression. Once entered, all enchantments and potion-effects need to be matched against by the contained predicates; each predicate removes it's match from the respective list, and at the end, the lists have to be empty for the whole exact expression to be considered a match. While, for simple expressions, prepending a single predicate may suffice, complex expressions can be prepended by making use of parentheses, since this operator is evaluated before various logical junctions.",source:"@site/docs/expression-syntax/exact-mode.md",sourceDirName:"expression-syntax",slug:"/expression-syntax/exact-mode",permalink:"/docs-item-predicate-parser/expression-syntax/exact-mode",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"documentationSidebar",previous:{title:"Text-Search Predicate",permalink:"/docs-item-predicate-parser/expression-syntax/text-search-predicate"},next:{title:"Or Junction",permalink:"/docs-item-predicate-parser/expression-syntax/or-junction"}},o={},d=[{value:"Examples",id:"examples",level:2}];function l(e){const t={a:"a",br:"br",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"exact-mode",children:"Exact Mode"})}),"\n",(0,s.jsxs)(t.p,{children:["Exact mode is not a predicate by itself, but rather an operator which can be prepended to any other expression. Once entered, ",(0,s.jsx)(t.strong,{children:"all"})," enchantments and potion-effects need to be matched against by the contained predicates; each predicate removes it's match from the respective list, and at the end, the lists have to be empty for the whole exact expression to be considered a match. While, for simple expressions, prepending a single predicate may suffice, complex expressions can be prepended by making use of ",(0,s.jsx)(t.a,{href:"/docs-item-predicate-parser/expression-syntax/parentheses",children:"parentheses"}),", since this operator is evaluated ",(0,s.jsx)(t.em,{children:"before"})," various logical junctions."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Language"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Identifier"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"en_us"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"exact"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"en_gb"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"exact"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"de_de"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"exakt"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"de_at"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"exakt"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"de_ch"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"exakt"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"zh_cn"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u7cbe\u786e"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(t.p,{children:["Input: exact unbreaking",(0,s.jsx)(t.br,{}),"\n","Result: All items which only contain the unbreaking enchantment"]}),"\n",(0,s.jsxs)(t.p,{children:["Input: exact regeneration",(0,s.jsx)(t.br,{}),"\n","Result: All potions which only contain the regeneration effect"]}),"\n",(0,s.jsxs)(t.p,{children:["Input: exact unbreaking ",(0,s.jsx)(t.a,{href:"/docs-item-predicate-parser/expression-syntax/or-junction",children:"or"})," thorns",(0,s.jsx)(t.br,{}),"\n","Result: All items which either only contain the unbreaking enchantment, or all items which contain thorns and possibly also other enchantments"]}),"\n",(0,s.jsxs)(t.p,{children:["Input: exact(unbreaking ",(0,s.jsx)(t.a,{href:"/docs-item-predicate-parser/expression-syntax/or-junction",children:"or"})," thorns)",(0,s.jsx)(t.br,{}),"\n","Result: All items which either only contain the unbreaking- or only the thorns-enchantment"]}),"\n",(0,s.jsxs)(t.p,{children:["Input: exact(unbreaking ",(0,s.jsx)(t.a,{href:"/docs-item-predicate-parser/expression-syntax/and-junction",children:"and"})," thorns)",(0,s.jsx)(t.br,{}),"\n","Result: All items which only contain both the unbreaking- and the thorns-enchantment"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);