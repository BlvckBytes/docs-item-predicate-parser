"use strict";(self.webpackChunkdocs_item_predicate_parser=self.webpackChunkdocs_item_predicate_parser||[]).push([[653],{4511:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=a(4848),t=a(8453);const i={sidebar_position:5},s="API Usage",o={id:"api-usage",title:"API Usage",description:"The following step-by-step introduction will guide you through integrating this API into your own project; you'll be amazed by how little time it takes.",source:"@site/docs/api-usage.md",sourceDirName:".",slug:"/api-usage",permalink:"/docs-item-predicate-parser/api-usage",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"documentationSidebar",previous:{title:"Configuration",permalink:"/docs-item-predicate-parser/configuration"}},l={},d=[{value:"Accessing The Helper",id:"accessing-the-helper",level:2},{value:"Parsing Tokens",id:"parsing-tokens",level:2},{value:"Command Arguments",id:"command-arguments",level:3},{value:"Plain Strings",id:"plain-strings",level:3},{value:"Parsing Predicates",id:"parsing-predicates",level:2},{value:"Executing Predicates",id:"executing-predicates",level:2},{value:"Stringifying Predicates",id:"stringifying-predicates",level:2},{value:"Completion And Preview",id:"completion-and-preview",level:2},{value:"Full Use Example",id:"full-use-example",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-usage",children:"API Usage"})}),"\n",(0,r.jsx)(n.p,{children:"The following step-by-step introduction will guide you through integrating this API into your own project; you'll be amazed by how little time it takes."}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-helper",children:"Accessing The Helper"}),"\n",(0,r.jsxs)(n.p,{children:["In order to make integration as simple as possible, all while ensuring standardized messages and behavior, the ",(0,r.jsx)(n.code,{children:"PredicateHelper"})," has been introduced. Let's obtain a reference to it."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'var parserPlugin = ItemPredicateParserPlugin.getInstance();\n\nif (parserPlugin == null)\n  throw new IllegalStateException("Depending on ItemPredicateParser to be successfully loaded");\n\nvar predicateHelper = parserPlugin.getPredicateHelper();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"parsing-tokens",children:"Parsing Tokens"}),"\n",(0,r.jsx)(n.p,{children:"The prerequisite to both parsing predicates and creating real-time suggestions as well as expanded previews is a list of tokens. A token represents the smallest logical unit and can be either an integer, a parenthesis, a quoted- or an unquoted-string."}),"\n",(0,r.jsx)(n.h3,{id:"command-arguments",children:"Command Arguments"}),"\n",(0,r.jsx)(n.p,{children:"Command arguments, represented by an array of strings, can be parsed as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Override\npublic boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n  try {\n    var tokens = predicateHelper.parseTokens(args, 0);\n  } catch (ItemPredicateParseException e) {\n    player.sendMessage(predicateHelper.createExceptionMessage(e));\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The second parameter indicates the index of the first argument corresponding to the predicate expression; this offset becomes useful if you have other, separately handled arguments in front of the predicate."}),"\n",(0,r.jsx)(n.h3,{id:"plain-strings",children:"Plain Strings"}),"\n",(0,r.jsx)(n.p,{children:"Plain strings, as they would occur when reviving persisted stringified predicates, can simply be parsed as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"String input;\n\ntry {\n  var tokens = predicateHelper.parseTokens(input);\n} catch (ItemPredicateParseException e) {\n  // TODO: Log message and handle this error-case\n  predicateHelper.createExceptionMessage(e);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parsing-predicates",children:"Parsing Predicates"}),"\n",(0,r.jsx)(n.p,{children:"After having parsed the input into a list of tokens, these tokens can now be parsed into the final predicate. Since tokens are a language-agnostic concept, you only now need to specify a concrete language whose identifiers are to be matched against when searching syllable matching units; select one from the corresponding enumeration of supported languages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"TranslationLanguage language;\n\ntry {\n  List<Token> tokens;\n  var predicate = predicateHelper.parsePredicate(language, tokens);\n} catch (ItemPredicateParseException e) {\n  // TODO: Send to player or append to log\n  predicateHelper.createExceptionMessage(e);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"executing-predicates",children:"Executing Predicates"}),"\n",(0,r.jsxs)(n.p,{children:["Predicates are represented by an AST (Abstract Syntax Tree), whose root-node is returned when parsing tokens. In order to execute all nodes and retrieve the final result-boolean, simply apply the predicate to any given ",(0,r.jsx)(n.code,{children:"ItemStack"}),", as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ItemStack item;\nItemPredicate predicate;\n\nvar result = predicate.test(item);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"stringifying-predicates",children:"Stringifying Predicates"}),"\n",(0,r.jsx)(n.p,{children:"To debug or persist predicates, simply stringify them by calling the corresponding method. The passed flag signals whether tokens are to be used; true means use tokens and thereby stringify as parsed, including abbreviations, while false means use translated identifiers, resulting in fully expanded matching units."}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"When stringifying with the intent of persisting predicates, it is advised to always fully expand, as to avoid needless ambiguity when changing the server-version."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ItemPredicate predicate;\n\nvar stringRepresentation = predicate.stringify(false);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"completion-and-preview",children:"Completion And Preview"}),"\n",(0,r.jsxs)(n.p,{children:["Implementing bukkit's ",(0,r.jsx)(n.code,{children:"TabCompleter"})," not only provides the user with a fully expanded live-preview (best displayed within the action-bar) of the entered predicate, but also responds with a list of suggestions, serving both as completions and as a preview of custom material groups (involving the ",(0,r.jsx)(n.code,{children:"?"}),"-syllable, see ",(0,r.jsx)(n.a,{href:"/docs-item-predicate-parser/expression-syntax/material-predicate",children:"Material Predicate"}),")."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"In order to avoid cutting off crucial information regarding the latter, it is advised to keep the maximum number of completions reasonably high."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Override\npublic @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n  if (!(sender instanceof Player player))\n    return null;\n\n  TranslationLanguage language;\n\n  try {\n    var tokens = predicateHelper.parseTokens(args, 0);\n    var completion = predicateHelper.createCompletion(language, tokens);\n\n    if (completion.expandedPreviewOrError() != null)\n      showActionBarMessage(player, completion.expandedPreviewOrError());\n\n    return completion.suggestions();\n  } catch (ItemPredicateParseException e) {\n    showActionBarMessage(player, predicateHelper.createExceptionMessage(e));\n    return null;\n  }\n}\n\nprivate void showActionBarMessage(Player player, String message) {\n  player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(message));\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"full-use-example",children:"Full Use Example"}),"\n",(0,r.jsx)(n.p,{children:"The following full example represents a template which can just be copied into your project to get started on parsing predicates."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import me.blvckbytes.item_predicate_parser.PredicateHelper;\nimport me.blvckbytes.item_predicate_parser.parse.ItemPredicateParseException;\nimport me.blvckbytes.item_predicate_parser.predicate.ItemPredicate;\nimport me.blvckbytes.item_predicate_parser.translation.TranslationLanguage;\nimport net.md_5.bungee.api.ChatMessageType;\nimport net.md_5.bungee.api.chat.TextComponent;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.command.TabCompleter;\nimport org.bukkit.entity.Player;\n\nimport java.util.List;\n\npublic class ExampleCommand implements CommandExecutor, TabCompleter {\n\n  private final TranslationLanguage translationLanguage;\n  private final PredicateHelper predicateHelper;\n\n  public ExampleCommand(TranslationLanguage translationLanguage, PredicateHelper predicateHelper) {\n    this.translationLanguage = translationLanguage;\n    this.predicateHelper = predicateHelper;\n  }\n\n  @Override\n  public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n    if (!(sender instanceof Player player))\n      return false;\n\n    ItemPredicate predicate;\n\n    try {\n      var tokens = predicateHelper.parseTokens(args, 0);\n      predicate = predicateHelper.parsePredicate(translationLanguage, tokens);\n    } catch (ItemPredicateParseException e) {\n      player.sendMessage(predicateHelper.createExceptionMessage(e));\n      return true;\n    }\n\n    if (predicate == null) {\n      player.sendMessage("\xa7cPlease provide a non-empty predicate");\n      return true;\n    }\n\n    var handItem = player.getInventory().getItemInMainHand();\n\n    if (predicate.test(handItem)) {\n      player.sendMessage("\xa7aThe item in your main hand matched the following predicate: " + predicate.stringify(false));\n      return true;\n    }\n\n    player.sendMessage("\xa7cThe item in your main hand mismatched the following predicate: " + predicate.stringify(false));\n    return true;\n  }\n\n  @Override\n  public List<String> onTabComplete(CommandSender sender, Command command, String label, String[] args) {\n    if (!(sender instanceof Player player))\n      return null;\n\n    try {\n      var tokens = predicateHelper.parseTokens(args, 0);\n      var completion = predicateHelper.createCompletion(translationLanguage, tokens);\n\n      if (completion.expandedPreviewOrError() != null)\n        showActionBarMessage(player, completion.expandedPreviewOrError());\n\n      return completion.suggestions();\n    } catch (ItemPredicateParseException e) {\n      showActionBarMessage(player, predicateHelper.createExceptionMessage(e));\n      return null;\n    }\n  }\n\n  private void showActionBarMessage(Player player, String message) {\n    player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(message));\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var r=a(6540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);